{
  "version": 3,
  "sources": ["../../@telegram-apps/telegram-ui/src/components/Blocks/Card/components/CardCell/CardCell.tsx", "../../@telegram-apps/telegram-ui/src/components/Blocks/Cell/Cell.tsx", "../../@telegram-apps/telegram-ui/src/components/Blocks/Cell/hooks/useTypographyCellComponents.tsx", "../../@telegram-apps/telegram-ui/src/components/Typography/Caption/Caption.tsx", "../../@telegram-apps/telegram-ui/src/components/Typography/Text/Text.tsx", "../../@telegram-apps/telegram-ui/src/components/Blocks/Card/CardContext.ts"],
  "sourcesContent": ["import { useContext } from 'react';\nimport styles from './CardCell.module.css';\n\nimport { classNames } from 'helpers/classNames';\nimport { hasReactNode } from 'helpers/react/node';\n\nimport { Cell, CellProps } from 'components/Blocks/Cell/Cell';\nimport { CardContext } from '../../CardContext';\n\ninterface CardCellProps extends CellProps {}\n\nexport const CardCell = ({\n  children,\n  subtitle,\n  className,\n  ...restProps\n}: CardCellProps) => {\n  const cardContext = useContext(CardContext);\n\n  return (\n    <Cell\n      className={classNames(\n        styles.wrapper,\n        cardContext.type === 'ambient' && styles['wrapper--ambient'],\n        className,\n      )}\n      subtitle={hasReactNode(subtitle) && <span className={styles.subtitle}>{subtitle}</span>}\n      {...restProps}\n    >\n      {hasReactNode(children) && <span className={styles.header}>{children}</span>}\n    </Cell>\n  );\n};\n", "'use client';\n\nimport { ElementType, forwardRef, ReactElement, ReactNode } from 'react';\nimport styles from './Cell.module.css';\n\nimport { classNames } from 'helpers/classNames';\nimport { hasReactNode } from 'helpers/react/node';\nimport { usePlatform } from 'hooks/usePlatform';\n\nimport { BadgeProps } from 'components/Blocks/Badge/Badge';\nimport { Tappable, TappableProps } from 'components/Service/Tappable/Tappable';\nimport { Subheadline } from 'components/Typography/Subheadline/Subheadline';\nimport { useTypographyCellComponents } from './hooks/useTypographyCellComponents';\n\nexport interface CellProps extends Omit<TappableProps, 'Component'> {\n  /** Content displayed above the main content as a subheading */\n  subhead?: ReactNode;\n  /** Main content displayed as a header */\n  children?: ReactNode;\n  /** Content displayed alongside the header as a hint */\n  hint?: ReactNode;\n  /** A badge component to be displayed next to the header */\n  titleBadge?: ReactElement<BadgeProps>;\n  /** Content displayed below the header as a subtitle */\n  subtitle?: ReactNode;\n  /** Additional description displayed below the subtitle */\n  description?: ReactNode;\n  /** Content or elements to be displayed on the left side of the cell */\n  before?: ReactNode;\n  /** Content or elements to be displayed on the right side of the cell */\n  after?: ReactNode;\n  /** Custom component or HTML tag to be used as the root element of the cell, div by default */\n  Component?: ElementType;\n  /** Controls the hover state of the component externally, useful for keyboard navigation */\n  hovered?: boolean;\n  /** Allows for multiline content without truncation */\n  multiline?: boolean;\n}\n\n/**\n * `Cell` component acts as a flexible and interactive container for various types of content,\n * enabling the creation of complex list items, form fields, and more. It leverages the `Tappable`\n * component for interaction and is designed to be flexible and extensible.\n */\nexport const Cell = forwardRef(({\n  children,\n  titleBadge,\n  hint,\n  subhead,\n  subtitle,\n  description,\n  className,\n  before,\n  after,\n  Component,\n  hovered,\n  multiline,\n  ...restProps\n}: CellProps, ref) => {\n  const platform = usePlatform();\n  const { Title, Description } = useTypographyCellComponents();\n\n  const hasTitle = hasReactNode(children) || hasReactNode(hint) || hasReactNode(titleBadge);\n  return (\n    <Tappable\n      ref={ref}\n      Component={Component || 'div'}\n      className={classNames(\n        styles.wrapper,\n        platform === 'ios' && styles['wrapper--ios'],\n        hovered && styles['wrapper--hovered'],\n        multiline && styles['wrapper--multiline'],\n        className,\n      )}\n      {...restProps}\n    >\n      {hasReactNode(before) && <div className={styles.before}>{before}</div>}\n      <div className={styles.middle}>\n        {hasReactNode(subhead) && (\n          <Subheadline className={styles.subhead} level=\"2\" weight=\"3\">\n            {subhead}\n          </Subheadline>\n        )}\n        {hasTitle && (\n          <Title className={styles.head}>\n            {hasReactNode(children) && <span className={styles.title}>{children}</span>}\n            {hasReactNode(hint) && <span className={styles.hint}>{hint}</span>}\n            {hasReactNode(titleBadge) && titleBadge}\n          </Title>\n        )}\n        {hasReactNode(subtitle) && (\n          <Subheadline className={styles.subtitle} level=\"2\" weight=\"3\">\n            {subtitle}\n          </Subheadline>\n        )}\n        {hasReactNode(description) && (\n          <Description className={styles.description}>\n            {description}\n          </Description>\n        )}\n      </div>\n      {hasReactNode(after) && <div className={styles.after}>{after}</div>}\n    </Tappable>\n  );\n});\n", "'use client';\n\nimport { useCallback } from 'react';\n\nimport { usePlatform } from 'hooks/usePlatform';\n\nimport { Caption } from 'components/Typography/Caption/Caption';\nimport { Subheadline } from 'components/Typography/Subheadline/Subheadline';\nimport { Text } from 'components/Typography/Text/Text';\nimport { TypographyProps } from 'components/Typography/Typography';\n\nexport const useTypographyCellComponents = () => {\n  const platform = usePlatform();\n  const isIOS = platform === 'ios';\n\n  const Title = useCallback((props: TypographyProps) => {\n    if (isIOS) {\n      return <Text {...props} />;\n    }\n\n    return <Subheadline level=\"1\" {...props} />;\n  }, [isIOS]);\n\n  const Description = useCallback((props: TypographyProps) => {\n    if (isIOS) {\n      return <Caption {...props} />;\n    }\n\n    return <Subheadline level=\"2\" {...props} />;\n  }, [isIOS]);\n\n  return {\n    Title,\n    Description,\n  };\n};\n", "import styles from './Caption.module.css';\n\nimport { classNames } from 'helpers/classNames';\n\nimport { Typography, TypographyProps } from '../Typography';\n\ntype CaptionLevel = '1' | '2';\n\nexport interface CaptionProps extends Omit<TypographyProps, 'plain'> {\n  /** The size level of the caption, influencing its styling and typography size. */\n  level?: CaptionLevel;\n}\n\nconst captionLevelStyles: Record<CaptionLevel, string> = {\n  '1': styles['wrapper--1'],\n  '2': styles['wrapper--2'],\n};\n\n/**\n * The Caption component is a text wrapper that applies specific typographic styles,\n * based on the provided `level` prop. It's built on top of the Typography component,\n * ensuring consistent text styling across the application. It primarily serves for text\n * that acts as a small, descriptive label or annotation.\n */\nexport const Caption = ({\n  level = '1',\n  className,\n  Component,\n  ...restProps\n}: CaptionProps) => (\n  <Typography\n    {...restProps}\n    className={classNames(styles.wrapper, captionLevelStyles[level], className)}\n    Component={Component || 'span'}\n  />\n);\n\n", "import { forwardRef } from 'react';\nimport styles from './Text.module.css';\n\nimport { classNames } from 'helpers/classNames';\n\nimport { Typography, TypographyProps } from '../Typography';\n\nexport type TextProps = Omit<TypographyProps, 'plain'>\n\n/**\n * Text component is designed for general-purpose text rendering,\n * offering a wide range of typographic options. It extends the Typography\n * component, inheriting its flexibility and styling capabilities.\n * This component is ideal for paragraphs, labels, or any textual content, providing\n * consistent styling across the application.\n */\nexport const Text = forwardRef(({\n  weight,\n  className,\n  Component,\n  ...restProps\n}: TextProps, ref) => (\n  <Typography\n    ref={ref}\n    {...restProps}\n    weight={weight}\n    className={classNames(styles.wrapper, className)}\n    Component={Component || 'span'}\n  />\n));\n\n", "'use client';\n\nimport { createContext } from 'react';\n\nexport interface CardContextInterface {\n  type: 'plain' | 'ambient';\n}\n\nexport const CardContext = createContext<CardContextInterface>({\n  type: 'plain',\n});\n"],
  "mappings": "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",
  "names": ["import_react", "import_react", "import_react", "captionLevelStyles", "Caption", "level", "className", "Component", "restProps", "_jsx", "Typography", "classNames", "Text", "forwardRef", "ref", "weight", "className", "Component", "restProps", "_jsx", "Typography", "classNames", "useTypographyCellComponents", "platform", "usePlatform", "isIOS", "Title", "useCallback", "props", "_jsx", "Text", "Subheadline", "level", "Description", "Caption", "Cell", "forwardRef", "ref", "children", "titleBadge", "hint", "subhead", "subtitle", "description", "className", "before", "after", "Component", "hovered", "multiline", "restProps", "platform", "usePlatform", "Title", "Description", "useTypographyCellComponents", "hasTitle", "hasReactNode", "_jsxs", "Tappable", "classNames", "_jsx", "div", "Subheadline", "level", "weight", "span", "import_react", "CardContext", "createContext", "type", "CardCell", "children", "subtitle", "className", "restProps", "cardContext", "useContext", "CardContext", "_jsx", "Cell", "classNames", "type", "hasReactNode", "span"]
}
