{
  "version": 3,
  "sources": ["../../@telegram-apps/telegram-ui/src/components/Form/Chip/Chip.tsx", "../../@telegram-apps/telegram-ui/src/components/Blocks/Card/components/CardChip/CardChip.tsx"],
  "sourcesContent": ["'use client';\n\nimport { AllHTMLAttributes, ElementType, ReactNode } from 'react';\nimport styles from './Chip.module.css';\n\nimport { classNames } from 'helpers/classNames';\nimport { hasReactNode } from 'helpers/react/node';\nimport { usePlatform } from 'hooks/usePlatform';\n\nimport { Tappable } from 'components/Service/Tappable/Tappable';\nimport { Subheadline } from 'components/Typography/Subheadline/Subheadline';\n\nexport interface ChipProps extends AllHTMLAttributes<HTMLDivElement> {\n  /** Defines the visual style of the chip, affecting its background, border, and shadow. */\n  mode?: 'elevated' | 'mono' | 'outline';\n  /** Content or component to be placed before the main text, typically an icon or avatar. */\n  before?: ReactNode;\n  /** Content or component to be placed after the main text, such as an icon indicating an action. */\n  after?: ReactNode;\n  /** The main text content of the chip. */\n  children?: ReactNode;\n  /** Specifies the HTML tag or React component used to render the Chip, defaulting to `div`. */\n  Component?: ElementType;\n}\n\nconst modeStyles = {\n  elevated: styles['wrapper--elevated'],\n  mono: styles['wrapper--mono'],\n  outline: styles['wrapper--outline'],\n};\n\n/**\n * Renders a compact element representing an input, attribute, or action. Chips can include icons, text, or both,\n * and are used to trigger actions, input information, or represent a complex piece of information in a compact form.\n */\nexport const Chip = ({\n  mode = 'elevated',\n  before,\n  after,\n  className,\n  children,\n  Component = 'div',\n  ...restProps\n}: ChipProps) => {\n  const platform = usePlatform();\n\n  return (\n    <Tappable\n      Component={Component}\n      interactiveAnimation=\"opacity\"\n      className={classNames(styles.wrapper, modeStyles[mode], className)}\n      {...restProps}\n    >\n      {hasReactNode(before) && <div className={styles.before}>{before}</div>}\n      <Subheadline\n        className={styles.text}\n        level={platform === 'ios' ? '2' : '1'}\n        weight=\"2\"\n      >\n        {children}\n      </Subheadline>\n      {hasReactNode(after) && <div className={styles.after}>{after}</div>}\n    </Tappable>\n  );\n};\n", "import styles from './CardChip.module.css';\n\nimport { classNames } from 'helpers/classNames';\n\nimport { Chip, ChipProps } from 'components/Form/Chip/Chip';\n\nexport interface CardChipProps extends ChipProps {}\n\nexport const CardChip = ({ className, ...restProps }: CardChipProps) => (\n  <Chip className={classNames(styles.wrapper, className)} {...restProps} />\n);\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;AAyBA,IAAMA,aAAa;EACjBC,UAAQ;EACRC,MAAI;EACJC,SAAO;AACT;AAMO,IAAMC,OAAO,CAAA,WAAA;MAAC,EACnBC,OAAO,YACPC,QACAC,OACAC,WACAC,UACAC,YAAY,MAAK,IAEP,QADPC,YAAAA,2BAAAA,QAAAA;IANHN;IACAC;IACAC;IACAC;IACAC;IACAC;;AAGA,QAAME,WAAWC,YAAAA;AAEjB,aACE,mBAAAC,MAACC,UAAAA,qBAAAA,eAAAA;IACCL;IACAM,sBAAqB;IACrBR,WAAWS,WAAAA,yBAA2BjB,WAAWK,IAAAA,GAAOG,SAAAA;KACpDG,SAAAA,GAAAA;;MAEHO,aAAaZ,MAAAA,SAAW,mBAAAa,KAACC,OAAAA;QAAIZ,WAAS;kBAAkBF;;UACzD,mBAAAa,KAACE,aAAAA;QACCb,WAAS;QACTc,OAAOV,aAAa,QAAQ,MAAM;QAClCW,QAAO;;;MAIRL,aAAaX,KAAAA,SAAU,mBAAAY,KAACC,OAAAA;QAAIZ,WAAS;kBAAiBD;;;;AAG7D;;;ACxDO,IAAMiB,WAAW,CAAA,WAAA;MAAC,EAAEC,UAAS,IAA+B,QAA1BC,YAAAA,2BAAAA,QAAAA;IAAdD;;aACzB,oBAAAE,KAACC,MAAAA,eAAAA;IAAKH,WAAWI,WAAAA,yBAA2BJ,SAAAA;KAAgBC,SAAAA,CAAAA;;",
  "names": ["modeStyles", "elevated", "mono", "outline", "Chip", "mode", "before", "after", "className", "children", "Component", "restProps", "platform", "usePlatform", "_jsxs", "Tappable", "interactiveAnimation", "classNames", "hasReactNode", "_jsx", "div", "Subheadline", "level", "weight", "CardChip", "className", "restProps", "_jsx", "Chip", "classNames"]
}
